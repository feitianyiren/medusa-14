{"version":3,"names":[],"mappings":"","sources":["js/ajax-notifications.js"],"sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar WSMessageUrl = '/ui'; // eslint-disable-line xo/filename-case\nvar test = !1;\n\nvar iconUrl = 'images/ico/favicon-120.png';\n\nPNotify.prototype.options.addclass = 'stack-bottomright';\nPNotify.prototype.options.buttons.closer_hover = !1; // eslint-disable-line camelcase\nPNotify.prototype.options.delay = 5000;\nPNotify.prototype.options.desktop = { desktop: !0, icon: iconUrl };\nPNotify.prototype.options.hide = !0;\nPNotify.prototype.options.history = !1;\nPNotify.prototype.options.shadow = !1;\nPNotify.prototype.options.stack = { dir1: 'up', dir2: 'left', firstpos1: 25, firstpos2: 25 };\nPNotify.prototype.options.styling = 'jqueryui';\nPNotify.prototype.options.width = '340px';\nPNotify.desktop.permission();\n\nfunction displayPNotify(type, title, message, id) {\n    new PNotify({ // eslint-disable-line no-new\n        type: type,\n        title: title,\n        desktop: {\n            tag: id\n        },\n        text: String(message).replace(/<br[\\s/]*(?:\\s[^>]*)?>/ig, '\\n').replace(/<[/]?b(?:\\s[^>]*)?>/ig, '*').replace(/<i(?:\\s[^>]*)?>/ig, '[').replace(/<[/]i>/ig, ']').replace(/<(?:[/]?ul|\\/li)(?:\\s[^>]*)?>/ig, '').replace(/<li(?:\\s[^>]*)?>/ig, '\\n* ')\n    });\n}\n\nfunction wsCheckNotifications() {\n    const proto = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const webRoot = MEDUSA.config.webRoot || ''; // eslint-disable-line no-undef\n    const ws = new WebSocket(proto + '//' + window.location.hostname + ':' + window.location.port + webRoot + '/ws' + WSMessageUrl);\n    ws.onmessage = function (evt) {\n        var msg;\n        try {\n            msg = JSON.parse(evt.data);\n        } catch (e) {\n            // eslint-disable-line unicorn/catch-error-name\n            msg = evt.data;\n        }\n\n        // Add handling for different kinds of events. For ex: {\"event\": \"notification\", \"data\": {\"title\": ..}}\n        if (msg.event === 'notification') {\n            displayPNotify(msg.data.type, msg.data.title, msg.data.body, msg.data.hash);\n        } else {\n            displayPNotify('info', '', msg);\n        }\n    };\n\n    ws.onerror = function () {\n        log.warn('Error connecting to websocket. Please check your network connection. ' + 'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n        displayPNotify('notice', 'Error connecting to websocket.', 'Please check your network connection. ' + 'If you are using a reverse proxy, please take a look at our wiki for config examples.');\n    };\n}\n\n// Listen for the config loaded event.\nwindow.addEventListener('build', function (e) {\n    if (e.detail === 'medusa config loaded') {\n        wsCheckNotifications();\n        if (test) {\n            displayPNotify('error', 'test', 'test<br><i class=\"test-class\">hello <b>world</b></i><ul><li>item 1</li><li>item 2</li></ul>', 'notification-test');\n        }\n    }\n}, false);\n\n},{}]},{},[1]);\n"],"file":"ajax-notifications.js"}